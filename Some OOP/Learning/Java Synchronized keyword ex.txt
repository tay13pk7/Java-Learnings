package org.practicJSON;


class Test
{
    int count;
    public synchronized void counter()
    {
        count++;
    }

}

public class Main
{
    public static void main(String[] args) {

        Test t1 = new Test();

        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {

                for (int i = 0; i < 1000; i++) {
                    t1.counter();
                }
            }
        }
        );

        Thread th1 = new Thread(new Runnable() {
            @Override
            public void run() {

                for (int i = 0; i < 1000; i++) {
                    t1.counter();
                }
            }
        }
        );


        th.start();    // thread start
        th1.start();

        try {
            th.join();  // Wait for the thread (th) to finish
            th1.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }


        System.out.println(t1.count);


        // remove the synchronized keyword and observe
        // The thing here is two threads have started and both of them at the same time are accessing the method that is why it is giving count
        // Solution use synchronize


    }
}